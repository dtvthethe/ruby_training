IRB 
.class : see the type off varriable

Book online: https://launchschool.com/books/ruby/read/introduction

																									  
                                |---------------------------------inherits------------------------------|
								|											|---<<instrance>>----[Custom Class]
[BasicObject] <--inherits-- [Object] <--inherits-- [Modue] <--inherits-- [Class]
													  ^
													  |---------------<<instance>>---------------[Custom Module]


1/ Convert data type:
		+ .to_i: convert to number type
		+ .to_f: convert to float value
2/ Compare:
	<=>: so sanh doi xung:
		+ neu < -1
		+ neu > 1
		+ neu 2 ben = nhau return 0
	<a_value>.eql?(<b_value>): so sanh ca kieu du lieu, tuong tu === trong js
	<def_name>! : gán luôn giá trị vào biến
============================

I/ VARRIABLES
	1/ Global var: $sign
	2/ Local var: sign
	3/ ** Instance var: @sign
	4/ ** Class var: @@sign
	5/ Constants: Capital Letter


II/ IN OR OUT 
	- puts : print values #{varriable_name}
	- gets => gets.chomp : get value input on command line: 
III/ STRING
	- .upcase
	- .downcase
	- .swapcase: swap upcase to down case and oposite
	- .reverse : reverse a string
	- .empty? -> boolean: check empty string
	- .capitalize: In hoa kí tự đầu tiên
	- .include?("<string>") -> boolean: tim kiem 1 chuoi co trong 1 chuoi khac ko, phan biet chu hoa thuong
	- .sub("<chuoi can thay>", "chuoi moi"): replace by <> <chuoi can thay>
	- Text: 
		<<<key_name>
			<noi dung 1>
			<noi dung 2>
			<noi dung n>...
		<key_name>

	- 
		+ a  = "a" 
		+ b = "b"
		+ a << b  : tương tự a += b
		=> a = "ab" 

IV/ Array
	- arr = Array.new | Array.new(<number_of_item>)
	- push(<item_value>) | arr << <item_value> | arr += <item_value>
	- pop : delete a last item
	- shift : delete a first item
	- index(<item_value>) -> int index of item_value : like indefOf
	- first: get first item
	- last: get last item
	- .unshift(<item_value>): insert a value to first index
	- delete_at(<index>) | slice!(<index>)
	- delete (<index>): delete by item value
	- .flatten: chuyển đổi mảng con thành phần tử trong mảng chứa nó
	- clear : xoá toàn bộ phần tử trong mảng

V/ BLock, Proc, Lambda
	1/ BLock: 1 khối lênh đc dặt trong {...}: dành cho 1 dòng,  hoặc do...end: dành cho nhiều dòng

	2/ Proc: .call(), Doesn't care parameter, can't return value, Object

	3/ Lambda: . call(), pass parameters EX: times_two.call(10), return value, Object


VI/ LOOP
	1/ While:
		while conditional [do]
			# TODO
		end

		OR

		begin
			# TODO
		end while conditional

	2/ Until:

		until conditional [do]
			# TODO
		end

		OR

		begin
			$ TODO
		end until conditional

	3/ Each:
		collection.each{|item| #something}

		# OR
		collection.each do |item|
			# something
		end

	4/ For:
		for variable [, variable ...] in expression [do]
			# code
		end

	5/ Iteration:

+---------+--------------------------+----------------------------+---------------------------------+-----------------------------------+-----------------------------+
|         | Description              | Is return value/ new array | params                          | Code                              | Result                      |
+---------+--------------------------+----------------------------+---------------------------------+-----------------------------------+-----------------------------+
| Each    |                          | Yes/ old values            | element of array                | arr.each { |x| x * 2 }            | [2, 8, 1, 2, 1, 9, 9, 4]    |
+---------+--------------------------+----------------------------+---------------------------------+-----------------------------------+-----------------------------+
| Collect |                          | Yes                        | element of array                | arr.collect { |x| x * 2 }         | [4, 16, 2, 4, 2, 18, 18, 8] |
+---------+--------------------------+----------------------------+---------------------------------+-----------------------------------+-----------------------------+
| Map     |                          | Yes                        | element of array                | arr.map { |x| x * 2 }             | [4, 16, 2, 4, 2, 18, 18, 8] |
+---------+--------------------------+----------------------------+---------------------------------+-----------------------------------+-----------------------------+
| Select  |                          | yes                        | element of array, condition     | arr.select { |x| x > 2 }          | [8, 9, 9, 4]                |
+---------+--------------------------+----------------------------+---------------------------------+-----------------------------------+-----------------------------+
| Inject  | perform calculate        | yes                        | 2 params(result, item of array) | arr.inject(9000) { |r, x| r + x } | 9036                        |
+---------+--------------------------+----------------------------+---------------------------------+-----------------------------------+-----------------------------+
| Detect  | get first value by condi | yes                        | element of array, condition     | arr.detect{ |x| x > 2 }           | 8                           |
+---------+--------------------------+----------------------------+---------------------------------+-----------------------------------+-----------------------------+
| Reject  | oposite with SELECT      | yes                        | element of array, condition     | arr.reject{ |x| x > 2 }           | [2, 1, 2, 1]                |
+---------+--------------------------+----------------------------+---------------------------------+-----------------------------------+-----------------------------+

VII/ CONDITION:
	1/ If:
		code if condition: if one line
	2/ Unless:
		unless conditional [then]
			code
		[else
			code ]
		end 

		#OR

		code unless conditional
	3/ Case When:
		case expression
		[when expression [, expression ...] [then]
			code ]...
		[else
			code ]
		end

		# Example:
			$age = 5
			case $age
			when 0 .. 2
				puts "baby"
			when 3 .. 6
				puts "little child"
			when 7 .. 12
				puts "child"
			when 13 .. 18
				puts "youth"
			else
				puts "adult"
			end

	4/ Break and Next
		Next similiar "Continue" other language progra

	5/ Redo and Retry
		*/ Redo:

		*/ Retry:
			

VIII/ HASH
	key | value pair

	1/ Create Hash:
		- Using Hash object:
			hsh = Hash.new  #OR hsh = Hash.new("default value")

		- Using literal:
			hsh = Hash["a":"Apple", "b":"SamSung"] : 
			hsh = Hash["a"=>"Airbnb", "b"=>"Booking", "c"=>"Agoda"]

		- Convert:
			Hash.try_convert({1=>2})   # => {1=>2}
			Hash.try_convert("1=>2")   # => nil ====> error


	2/ Access an item inside hash
		h[:a] #=> 100
		h[:c] #=> nil
		h.keys #=> [:a, :b]
		h.values #=> [100, 200]


===========OOP=============
:D
@@class var/meth : similiar static 


VIX/ FILE

	● r: read-only (starts at beginning of file)
	● w: write-only (if the file exists, overwrites everything in the file)
	● w+: read and write (if the file exists, overwrites everything in the file)
	● a+: read-write (if file exists, starts at end of file. Otherwise creates a new file). Suitable for updating files.


VV/ ERROR HANDING

	begin
		...
	rescue StandardError => e  #catch error
		...
	else #success
		...
	ensure #finally
		...
	end

	#Example:
	begin
		retries ||= 0
		puts "try ##{ retries }"
		raise "the roof"
	rescue
		retry if (retries += 1) < 3
	end
VVI/ INCLUDE & EXTEND
	1/ Include

	2/ Extend